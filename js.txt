js //

변수(Variavles) : 변수(Variavles)는 변하는 데이터(값)을 저장할 수 있는 메모리 공간입니다.

문자형 : 문자형(String)데이터는 다음과 같이 문자나 숫자를 큰따옴표(" ") 또는 작은따옴표(' ')로 감싸고 있습니다.

숫자형 : 숫자형(Number)데이터는 단어 의미 그대로 숫자를 의미합니다.

typeof : typeof는 지정한 데이터 또는 변수에 저장된 자료형을 알고 싶을 때 사용합니다. 

연산자: 산술, 문자 결합, 대입(복합 대입), 증감, 비교, 논리, 삼항 조건 연산자가 있습니다.

산술연산자 : 더하기(+), 빼기(-), 곱하기(*), 나누기(/), 나머지(%)가 있습니다. 

대입연산자 : 대입 연산자(=)는 연산된 데이터를 변수에 저장할 때 사용합니다. 복합 대입 연산자(+=, -=, *=, /=, %=)는 산술 연산자와 대입 연산자가 복합적으로 적용된 것을 말합니다.

증감연산자 : 증감 연산자에는 숫자형 데이터를 1씩 증가시키는 증산 연산자(++)와 반대로 1씩 감소시키는 감소 연산자(--)가 있습니다. 증감연산자는 변수의 어느 위치에 오는가에 따라 결괏값이 달라집니다. 

비교연산자 : 두 데이터를 '크다, 작다, 같다'와 같이 비교할 때 사용하는 연산자입니다. 연산된 결괏값은  true(참) 또는 false(거짓)로 논리형 데이터를 반환합니다.

논리연산자 : 논리 연산자에는 | |(or), &&(and), !(not)이 있으며, 논리 연산자는 피연산자가 논리형 데이터인 true 또는 false로 결괏값을 반환합니다. 

조건문 : 조건식의 값이 참(true)인지, 거짓(false)인지에 따라 자바스크립트 코드를 제어합니다. 조건문의 종류에는 if문, else문 그리고 다중if문이 있습니다.

if문 : if문은  조건식을 만족(true)할 경우에만 코드를 실행합니다.

if~else문 : else문은 조건식을 만족할( true) 경우와 만족하지 않을(false)경우에 따라 실행되는 코드가 달라집니다.

다중 if문 : 다중 if문은 두가지 이상의 조건식과 정해 높은 조건을 만족하지 않았을 때 실행되는 코드로 이루어져 있습니다. 

중첩 if문 : 중첩 if문은 if문 안에  if문이 오는 구조입니다.
 

switch문 : 해당 조건에 맞는 case를 구분해서 수행하는 제어문입니다.

삼항연산자 : 조건부 연산자는 조건을 처리하는 if문의 다른 형태 제어문입니다.

반복문 : 반복문을 이용하면 코드를 원하는 횟수만큼 반복하여 실행할 수 있습니다. while문과 do while문, for문만 있음 간단하게 가능합니다.

while문 : while문은 조건식을 만족할 때까지 코드를 여러 회 반복하여 실행할 수 있다. 

do while문 : do while문은 반드시 한 번은 코드를 실행하고 조건식을 검사합니다. 

for문 : for문은 조건식을 만족할 때까지 특정 코드를 반복하여 실행합니다. 

break문 : 반복문인 while문 또는 for문에서 break문을 실행하면 조건식과 상관없이 강제로 반복문을 종료합니다.

continue문 : 조건문에서만 사용 가능하며 conrinue문 다음에 오는 코드는 무시하고 바로 조건식으로 이동해 조건 검사를 합니다.

함수 : 함수는 스크립트 실행문을 보관하는 역할을 하기 때문에 반복 사용되는 코드를 구조화하거나 재활용을 목적으로 사용합니다.

선언적함수: 기본적으로 함수는 함수명을 설정하고 함수 이름을 호출해야 실행이 됩니다. 

익명함수 : 익명함수는 함수의 이름이 없기 때문에 변수에 넣어서 사용하는 함수입니다. 

매개변수가 있는 함수 : 매개변수가 있는 함수는 함수를 호출할 때 전달하고자 하는 값을 입력하여 호출할 수 있습니다. 

argument함수 : arguments를 사용하면 매개변수를 사용하는 것처럼 함수 호출문의 값을 받아 올 수 있습니다.

리턴값이있는함수 : return문은 함수에서 결괏값을 반환할 때 사용합니다.

재귀함수 : 재귀함수는 함수 정의문 내에 함수를 다시 호출하여 함수를 반복문처럼 사용할 때 사용합니다. 

콜백함수 : 함수를 변수에 저장하고 변수를 함수의 인자로 사용하여 매개 변수에 전달하는 함수입니다.

내부함수(스코프) : 스코프(Scope)의 사전적 의미는 범위이며, 여기에서는 변수 또는 함수의 유효 범위를 가르킵니다.

객체생성자함수 : 내장 객체를 생성할 때는 이미 자바스크립트 엔진에 내장되어 있는 객체 생성자 함수를 사용하여 객체를 생성합니다.

프로토타입함수 : 프로토타입을 사용하여 등록한 함수는 원형(객체 생성자 함수)에서 생성된 객체를 공유할 수 있습니다. 즉 여러개의 함수를 등록할 필요가 없습니다.

화살표함수 : 화살표 함수는 function대신 화살표(=>)를 사용하여 보다 간략한 방법으로 함수를 선언할 수 있다. 



setAttribute : setAttribute()는 지정된 요소의 속성 값을 설정합니다. 속성이 이미 존재하면 값이 업데이트됩니다. 그렇지 않으면 지정된 이름과 값으로 새 속성이 추가됩니다.

getElementById : getElementById()는 지정된 ID를 가진 요소를 가져옵니다.

querySelector : .querySelector()는 CSS 선택자로 요소를 선택하게 해줍니다. 
주의할 점은 선택자에 해당하는 첫번째 요소만 선택한다는 것입니다.

addEventListener : addEventListener() 는 지정한 이벤트가 대상에 전달될 때마다 호출할 함수를 설정합니다. 

forEach : forEach() 메서드는 주어진 함수를 배열 요소 각각에 대해 실행합니다.

for-of : or...of 명령문은 반복가능한 객체 (Array, Map, Set, String, TypedArray, arguments 객체 등을 포함)에 대해서 반복하고 각 개별 속성값에 대해 실행되는 문이 있는 사용자 정의 반복 후크를 호출하는 루프를 생성합니다.

for-in : for...in문은 객체에서 문자열로 키가 지정된 
모든 열거 가능한 속성에 대해 반복


배열의 비구조화 할당 : 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 JavaScript 표현식입니다.


innerText : HTML 코드가 그대로 입력되지 않으며, 텍스트로 입력됩니다.

innerHTML : QuerySelector로 가져온 도큐먼트 오브젝트의 내용이나, 내부 HTML 코드를 JavaScript 코드에서 변경 할 수 있습니다. 

setTimeout : setTimeout은 일정 시간이 지난 후에 함수를 실행하는 방법입니다.

setInterval : setInterval은 일정 시간 간격을 두고 함수를 실행하는 방법입니다.


pageYoffset/pageXOffset : 문서가 수직/수평으로 얼마나 스크롤됐는지 픽셀 단위로 반환합니다. 

offsettop : 컨텐츠 요소와 윈도우 상단의 상대적 거리를 반환한 수치입니다. 

clientX : 현재 보이는 브라우저 화면이 기준이 되는 X/Y좌표 값입니다. 

offsetX : 이벤트 대상이 기준이 되는 X/Y좌표 값입니다. 

pageX : 전체 문서가 기준이 되는 X/Y좌표 값입니다. 

screenX : 모니터 화면이 기준이 되는 X/Y좌표 값입니다. 

수학 객체 메서드 : 단순 산술 연산자로 할 수 없는 값들은 자바스크립트의 내장 객체(수학 객체)를 이용하여 최댓값, 최솟값, 반올림값 등의  연산 작업들을 수행할 수 있습니다.

classList : classList 메서드는 해당 Element의 클래스목록에 접근하는 간편한방법

nextElementSibling : nextElementSibling은 다음 형제  요소를 반환합니다.

previousElementSibling : previousElementSibling은 이전 형제 요소를 반환합니다.  

requestAnimationFrame : 높은 부하 발생을 지양하는 애니메이션 구현 방법 중 하나입니다. 

join : join() 메서드는 배열의 모든 요소를 연결해 하나의 문자열로 만듭니다.














